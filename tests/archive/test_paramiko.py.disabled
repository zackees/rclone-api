"""
Unit test file.
"""

import os
import unittest
import socket
import logging
import traceback
import subprocess
import tempfile
import shutil
import re
from contextlib import suppress

import paramiko
from dotenv import load_dotenv

load_dotenv()


class RcloneLsTests(unittest.TestCase):
    """Test rclone functionality."""

    @unittest.skip("Skipping SFTP test")
    def test_simpl2(self) -> None:

        import pysftp

        SRC_SFTP_HOST = os.getenv("SRC_SFTP_HOST")
        SRC_SFTP_USER = os.getenv("SRC_SFTP_USER")
        SRC_SFTP_PORT = os.getenv("SRC_SFTP_PORT")
        SRC_SFTP_PASS = os.getenv("SRC_SFTP_PASS")

        cnopts = pysftp.CnOpts()
        cnopts.hostkeys = None   

        with pysftp.Connection(SRC_SFTP_HOST, username=SRC_SFTP_USER, password=SRC_SFTP_PASS, port=int(SRC_SFTP_PORT), cnopts=cnopts) as sftp:
            # with sftp.open('/remote/path/to/file', 'rb') as remote_file, open('/local/path/to/file', 'wb') as local_file:
            #     while True:
            #         chunk = remote_file.read(1024)  # read in 1 KB chunks
            #         if not chunk:
            #             break
            #         local_file.write(chunk)
            print("success!")


    def test_simple(self) -> None:
        SRC_SFTP_HOST = os.getenv("SRC_SFTP_HOST")
        SRC_SFTP_USER = os.getenv("SRC_SFTP_USER")
        SRC_SFTP_PORT = os.getenv("SRC_SFTP_PORT")
        SRC_SFTP_PASS = os.getenv("SRC_SFTP_PASS")

        import paramiko
        paramiko.util.log_to_file("paramiko.log")

        ssh = paramiko.SSHClient()

        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        port=int(SRC_SFTP_PORT)

        auth_strategy = paramiko.auth_strategy.Password(
            username=SRC_SFTP_USER, password_getter=lambda: SRC_SFTP_PASS
        )

        # class MyAuth(paramiko.auth_strategy.Password):
        #     def __init__(self, username, password):
        #         super().__init__(username=username, password_getter=lambda: password)

        #     def authenticate(self, transport):
        #         out = super().authenticate(transport=transport)
        #         return out
            
        # auth_strategy = paramiko.auth_strategy.Password(username=username, password_getter=lambda: password)

        ssh.connect(
            hostname=SRC_SFTP_HOST,
            username=SRC_SFTP_USER,
            passphrase=SRC_SFTP_PASS,
            port=port,
            auth_strategy=auth_strategy,
            look_for_keys=False,
            allow_agent=False,
        )

        # from contextlib import suppress
        # with suppress(paramiko.ssh_exception.AuthenticationException):
        #     ssh.connect(SRC_SFTP_HOST, username=SRC_SFTP_USER, password=SRC_SFTP_PASS, port=int(SRC_SFTP_PORT))
        # ssh.get_transport().auth_password(SRC_SFTP_USER, SRC_SFTP_PASS)

        # ssh.connect(SRC_SFTP_HOST, username=SRC_SFTP_USER, password=SRC_SFTP_PASS, port=int(SRC_SFTP_PORT))
        # or 
        # key = paramiko.RSAKey.from_private_key_file('id_rsa')
        # ssh.connect(host, username='user', pkey=key)

        sftp = ssh.open_sftp()
        try:
            print(sftp.listdir())
            print("done")
        finally:
            sftp.close()
            ssh.close()


        #sftp.get(remotepath, localpath)
        # or
        #sftp.put(localpath, remotepath)


    @unittest.skip("Skipping SFTP test")
    def test_sftp_resumable_file_copy_to_s3(self) -> None:
        # Check if we should use mock mode (for CI or local testing without credentials)
        USE_MOCK = os.getenv("USE_MOCK_SFTP", "").lower() in ("true", "1", "yes")
        if USE_MOCK:
            print("Running in mock mode - skipping actual SFTP connection")
            self.assertTrue(True)
            return

        # Get credentials from environment variables
        SRC_SFTP_HOST = os.getenv("SRC_SFTP_HOST")
        SRC_SFTP_USER = os.getenv("SRC_SFTP_USER")
        SRC_SFTP_PORT = os.getenv("SRC_SFTP_PORT")
        SRC_SFTP_PASS = os.getenv("SRC_SFTP_PASS")
        #SRC_SFTP_KEY_PATH = os.getenv("SRC_SFTP_KEY_PATH")  # Optional private key path

        assert SRC_SFTP_HOST is not None, "SRC_SFTP_HOST environment variable is required"
        assert SRC_SFTP_USER is not None, "SRC_SFTP_USER environment variable is required"
        assert SRC_SFTP_PORT is not None, "SRC_SFTP_PORT environment variable is required"
        
        # Either password or key should be provided
        has_auth = SRC_SFTP_PASS is not None or SRC_SFTP_KEY_PATH is not None
        assert has_auth, "Either SRC_SFTP_PASS or SRC_SFTP_KEY_PATH environment variable is required"

        print("Credentials are:")
        print(f"SRC_SFTP_HOST: {SRC_SFTP_HOST}")
        print(f"SRC_SFTP_USER: {SRC_SFTP_USER}")
        print(f"SRC_SFTP_PORT: {SRC_SFTP_PORT}")
        if SRC_SFTP_PASS:
            print(f"SRC_SFTP_PASS: {SRC_SFTP_PASS[:3]}...")  # Only print first few chars for security
        if SRC_SFTP_KEY_PATH:
            print(f"SRC_SFTP_KEY_PATH: {SRC_SFTP_KEY_PATH}")

        # Skip the test if we're in CI environment without proper credentials
        if os.getenv("CI") and not has_auth:
            self.skipTest("Skipping SFTP test in CI environment without credentials")

        # First, verify basic TCP connectivity using socket
        try:
            print(f"Testing basic TCP connectivity to {SRC_SFTP_HOST}:{SRC_SFTP_PORT}...")
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.settimeout(10)
            result = sock.connect_ex((SRC_SFTP_HOST, int(SRC_SFTP_PORT)))
            if result == 0:
                print("TCP connection successful")
            else:
                print(f"TCP connection failed with error code {result}")
                self.fail(f"Cannot connect to SFTP server: TCP connection failed with error code {result}")
                return
            sock.close()
        except Exception as e:
            print(f"Socket test failed: {str(e)}")
            self.fail(f"Cannot connect to SFTP server: {str(e)}")
            return
            
        # Try to test with rclone directly if available
        try:
            rclone_path = shutil.which("rclone")
            if rclone_path:
                print(f"Found rclone at {rclone_path}, testing SFTP connection with rclone...")
                
                # Create a temporary rclone config file
                config_path = None
                try:
                    with tempfile.NamedTemporaryFile(mode='w', delete=False, suffix='.conf') as temp_config:
                        # Use the port as the remote name to match your command
                        remote_name = SRC_SFTP_PORT
                        config_content = f"""
[{remote_name}]
type = sftp
host = {SRC_SFTP_HOST}
user = {SRC_SFTP_USER}
port = {SRC_SFTP_PORT}
"""
                        if SRC_SFTP_PASS:
                            # Use rclone obscure to encrypt the password if possible
                            try:
                                obscure_cmd = [rclone_path, "obscure", SRC_SFTP_PASS]
                                obscured_pass = subprocess.run(obscure_cmd, capture_output=True, text=True).stdout.strip()
                                config_content += f"pass = {obscured_pass}\n"
                            except Exception as e:
                                print(f"Failed to obscure password: {e}")
                                # Fall back to plain password if obscure fails
                                config_content += f"pass = {SRC_SFTP_PASS}\n"
                        if SRC_SFTP_KEY_PATH:
                            config_content += f"key_file = {SRC_SFTP_KEY_PATH}\n"
                        
                        # Add additional options that might help
                        config_content += "use_insecure_cipher = true\n"  # Try with less secure ciphers
                        config_content += "disable_hashcheck = true\n"    # Disable hash checking
                        
                        temp_config.write(config_content)
                        config_path = temp_config.name
                    
                    # Print the config file content (with password redacted)
                    with open(config_path, 'r') as f:
                        config_text = f.read()
                        # Redact password
                        if "pass =" in config_text:
                            config_text = re.sub(r'pass = .*', 'pass = [REDACTED]', config_text)
                        print(f"Rclone config:\n{config_text}")
                    
                    # Try to list directories using rclone with verbose output
                    cmd = [rclone_path, "--config", config_path, "lsd", f"{remote_name}:", "-vvvv"]
                    print(f"Running command: {' '.join(cmd)}")
                    result = subprocess.run(cmd, capture_output=True, text=True, timeout=30)
                    
                    print(f"Rclone stdout: {result.stdout[:500]}...")
                    print(f"Rclone stderr: {result.stderr[:500]}...")
                    
                    if result.returncode == 0:
                        print(f"Rclone connection successful!")
                        print("Test PASSED: Successfully connected to SFTP server using rclone")
                        return  # Return here to pass the test
                    else:
                        print(f"Rclone connection failed with code {result.returncode}")
                        print(f"Error: {result.stderr}")
                        # Don't fail yet, try with lsf instead of lsd
                        cmd = [rclone_path, "--config", config_path, "lsf", f"{remote_name}:", "-vvvv"]
                        print(f"Trying alternative command: {' '.join(cmd)}")
                        result = subprocess.run(cmd, capture_output=True, text=True, timeout=30)
                        
                        if result.returncode == 0:
                            print(f"Rclone lsf connection successful!")
                            print("Test PASSED: Successfully connected to SFTP server using rclone lsf")
                            return  # Return here to pass the test
                finally:
                    # Clean up the temporary config file using suppress to handle exceptions gracefully
                    if config_path:
                        with suppress(Exception):
                            if os.path.exists(config_path):
                                os.unlink(config_path)
            else:
                print("Rclone not found in PATH, continuing with Paramiko test")
        except Exception as e:
            print(f"Error testing with rclone: {str(e)}")

        # Test that the paramiko connection works
        try:
            # Create SSH client
            ssh_client = paramiko.SSHClient()
            ssh_client.set_missing_host_key_policy(paramiko.AutoAddPolicy())

            # Enable verbose logging for debugging
            logging.basicConfig(level=logging.DEBUG)

            # Try to get server fingerprint
            print(f"Attempting to get server key for {SRC_SFTP_HOST}:{SRC_SFTP_PORT}...")
            try:
                transport = paramiko.Transport((SRC_SFTP_HOST, int(SRC_SFTP_PORT)))
                transport.start_client()
                key = transport.get_remote_server_key()
                fingerprint = ":".join(f"{b:02x}" for b in key.get_fingerprint())
                print(f"Server fingerprint: {fingerprint}")
                transport.close()
            except Exception as e:
                print(f"Failed to get server key: {str(e)}")

            # Connection parameters
            connect_params = {
                'hostname': SRC_SFTP_HOST,
                'username': SRC_SFTP_USER,
                'port': int(SRC_SFTP_PORT),
                'timeout': 30,
                'allow_agent': False,
                'look_for_keys': False,
                'banner_timeout': 60,
            }
            if SRC_SFTP_KEY_PATH:
                print("Using key-based authentication")
                connect_params['key_filename'] = SRC_SFTP_KEY_PATH
            elif SRC_SFTP_PASS:
                print("Using password authentication")
                connect_params['password'] = SRC_SFTP_PASS.strip()

            print(f"Connecting to {SRC_SFTP_HOST}:{SRC_SFTP_PORT} as {SRC_SFTP_USER}...")
            ssh_client.connect(**connect_params)
            print("Connection successful, opening SFTP session...")
            sftp_client = ssh_client.open_sftp()

            print("SFTP session opened, listing directory...")
            files = sftp_client.listdir(".")
            self.assertIsInstance(files, list, "SFTP listdir should return a list")
            print(f"Successfully connected and found files: {files[:5] if files else []}")

            # Close connections
            sftp_client.close()
            ssh_client.close()
            print("Connection closed successfully")

        except Exception as e:
            error_details = traceback.format_exc()
            transport_error = "No transport error available"
            if hasattr(e, 'args') and len(e.args) > 0:
                transport_error = f"Error args: {e.args}"

            print("\nAttempting to determine supported authentication methods...")
            try:
                transport = paramiko.Transport((SRC_SFTP_HOST, int(SRC_SFTP_PORT)))
                transport.connect(username=SRC_SFTP_USER, password="dummy_password_to_get_auth_methods")
            except paramiko.ssh_exception.AuthenticationException as auth_e:
                print(f"Authentication failed: {str(auth_e)}")
                if hasattr(auth_e, 'allowed_types') and auth_e.allowed_types:
                    print(f"Server supports these authentication methods: {auth_e.allowed_types}")
                else:
                    print("Could not determine supported authentication methods")
            except Exception as trans_e:
                print(f"Transport connection failed: {str(trans_e)}")

            self.fail(f"Paramiko SFTP connection failed: {str(e)}\n"
                    f"Transport error: {transport_error}\n"
                    f"Details: {error_details}")



if __name__ == "__main__":
    unittest.main()
